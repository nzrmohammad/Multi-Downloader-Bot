# core/cookie_manager.py

import asyncio
import logging
import time
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from core.settings import settings

logger = logging.getLogger(__name__)

COOKIE_REFRESH_LOCK = asyncio.Lock()

def convert_cookies_to_netscape(selenium_cookies):
    """
    فرمت کوکی‌های JSON سلنیوم را به فرمت Netscape (cookies.txt) تبدیل می‌کند.
    """
    netscape_cookies = "# Netscape HTTP Cookie File\n# Generated by Multi-Downloader-Bot\n\n"
    for cookie in selenium_cookies:
        domain = cookie.get('domain', '')
        include_subdomains = 'TRUE' if domain.startswith('.') else 'FALSE'
        path = cookie.get('path', '/')
        secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
        expiry = int(cookie.get('expiry', 0))
        name = cookie.get('name', '')
        value = cookie.get('value', '')
        netscape_cookies += f"{domain}\t{include_subdomains}\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n"
    return netscape_cookies

async def refresh_youtube_cookies() -> bool:
    """
    فرآیند کامل لاگین اتوماتیک و ذخیره کوکی را در پس‌زمینه انجام می‌دهد.
    """
    if COOKIE_REFRESH_LOCK.locked():
        logger.warning("Cookie refresh process is already running. Skipping.")
        return False

    async with COOKIE_REFRESH_LOCK:
        logger.info("Starting automated YouTube cookie refresh process using undetected-chromedriver...")

        if not settings.YOUTUBE_EMAIL or not settings.YOUTUBE_PASSWORD:
            logger.error("YOUTUBE_EMAIL or YOUTUBE_PASSWORD are not set in .env file. Cannot refresh cookies.")
            return False

        options = uc.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        options.add_argument('--headless=new') # استفاده از حالت جدید headless

        driver = None
        try:
            # --- FIX: حذف نسخه ثابت و اجازه دادن به تشخیص خودکار ---
            driver = uc.Chrome(options=options)
            
            logger.info("Undetected headless browser started. Navigating to Google login.")
            driver.get("https://accounts.google.com/ServiceLogin?service=youtube")
            wait = WebDriverWait(driver, 20)

            # وارد کردن ایمیل
            email_field = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="identifierId"]')))
            email_field.send_keys(settings.YOUTUBE_EMAIL)
            driver.find_element(By.XPATH, '//*[@id="identifierNext"]/div/button').click()
            logger.info("Email submitted.")
            time.sleep(4)

            # وارد کردن رمز عبور
            password_field = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="password"]/div[1]/div/div[1]/input')))
            password_field.send_keys(settings.YOUTUBE_PASSWORD)
            driver.find_element(By.XPATH, '//*[@id="passwordNext"]/div/button').click()
            logger.info("Password submitted.")
            
            logger.info("Waiting for login confirmation and redirect to YouTube...")
            WebDriverWait(driver, 30).until(EC.url_contains("youtube.com"))
            
            WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "ytd-app")))
            logger.info("Successfully logged in and redirected to YouTube.")

            selenium_cookies = driver.get_cookies()
            if not selenium_cookies:
                logger.error("Failed to extract cookies after login.")
                return False

            netscape_format_cookies = convert_cookies_to_netscape(selenium_cookies)
            
            cookie_file = settings.YOUTUBE_COOKIES_FILE or "cookies.txt"
            with open(cookie_file, "w", encoding='utf-8') as f:
                f.write(netscape_format_cookies)
            
            logger.info(f"✅ YouTube cookies have been successfully refreshed and saved to '{cookie_file}'.")
            return True

        except Exception as e:
            logger.error(f"An error occurred during the cookie refresh process: {e}", exc_info=False)
            try:
                if driver:
                    driver.save_screenshot('debug_screenshot.png')
                    logger.error("A screenshot ('debug_screenshot.png') has been saved for debugging.")
            except:
                 logger.error("Could not save a screenshot.")
            return False
        finally:
            if driver:
                driver.quit()